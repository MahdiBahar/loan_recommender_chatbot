from LLM_utils import LLM
from information_retrival import IR
from langchain.prompts import PromptTemplate

class Chat():
    def __init__(self):
        self.ir = IR()
        self.llm = LLM(temp=0)
        
    # def prompt_rag(self , context , query):
    #     qa_system_prompt = (
    #     "شما یک دستیار متخصص در حوزه وام‌های بانک ملت هستید. "
    #     "فقط بر اساس اطلاعات موجود در «محتوا» پاسخ دهید و از حدس یا افزودن اطلاعات خودداری کنید.\n\n"
    #     "دستورالعمل‌ها:\n"
    #     "1. اگر سؤال کاربر فقط شامل عبارت‌های خوش‌آمدگویی یا احوال‌پرسی باشد، فقط با یک جملهٔ خوش‌آمدگویی رسمی پاسخ دهید و هیچ توضیح اضافه دیگری نده؛\n"
    #     "   مثال: «سلام! چطور می‌توانم در زمینه وام‌های بانک ملت کمکتان کنم؟»\n"
    #     "2. پاسخ اصلی را در حداکثر سه جمله حفظ کنید.\n"
    #     " 3. در موارد زیر این پیغام را چاپ کن : 'متأسفم، اطلاعات کافی برای پاسخگویی موجود نیست. تنها در حوزه وام‌های بانک ملت راهنمایی می‌کنم'. \n"
    #     "3.1 اگر در محتوا اطلاعات کافی برای پاسخ به پیام کاربر وجود ندارد، این متن را فقط فقط یک بار برگردانید و هیچ توضیح و اطلاعات اضافه ای در مورد موضوعات دیگر ندهید:\n"
    #     "3.2 اگر سؤال کاربر حاوی الفاظ رکیک یا محتوای نامناسب باشد، این متن را فقط فقط یک بار برگردانید و هیچ توضیح اضافه ای ندهید.\n"
    #     "3.3 اگر متن ورودی که کاربر وارد کرد نامفهوم بود. به عنوان مثال:'gdgddsgsg' و 'یبیشسیسشی'.  در این حالت متن ۳ را فقط فقط یک بار برگردانید و هیچ توضیح اضافه ای ندهید.\n"
    #     # "3.4 اگر سؤال کاربر را جواب دادی دیگر این پیغام را چاپ نکن. یعنی یا بگو اطلاعات کافی وجود ندارد یا جواب استخراج شده را فقط فقط یکبار  به کاربر بده.\n"
    #     "6. تمام خروجی‌ها باید به زبان فارسی و با لحنی رسمی و موجز باشند.\n\n"
    #     "محتوا:\n{context}\n\n"
    #     "سؤال کاربر:\n{user_query}\n\n"
    #     # "### Now process this input:\n"
    #     #     "Input: \"{user_query}\n\n"
    #     #     "Output:\n{context}\n\n"
    #     # "پاسخ:"
    # )

    ## Version 2
    def prompt_rag(self, context, query):
        qa_system_prompt =  (
        "شما یک دستیار متخصص در حوزه وام‌های بانک ملت هستید و "
        "مجبورید تنها با اطلاعات موجود در «محتوا» پاسخ دهید. "
        

        "روند تصمیم‌گیری:\n"
        "1. اگر سؤال کاربر فقط شامل خوش‌آمدگویی (مثل «سلام»، «درود»، «چطوری») باشد، "
        "فقط یک بار این پاسخ را بدهید:\n"
        "   «سلام! چطور می‌توانم در زمینه وام‌های بانک ملت کمکتان کنم؟»\n\n"
        "2. غیر از احوال‌پرسی:\n"
        "   - اگر محتوا اطلاعات کافی برای پاسخ دارد، حداقل یک جمله و حداکثر در سه جمله پاسخ بدهید. "
        "پس از آن هیچ خروجی دیگری اضافه نکنید و نشان ندهید.\n\n"
        "3. در غیر این صورت (محتوا ناکافی یا ورودی نامفهوم یا الفاظ رکیک):\n"
        "   یک بار این متن را برگردان و پایان بدهید:\n"
        "   «متأسفم، اطلاعات کافی برای پاسخگویی موجود نیست. تنها در حوزه وام‌های بانک ملت راهنمایی می‌کنم.»\n\n"
        "مهم: پاسخ را تمام کنید و هیچ‌گونه کلمه اضافی مثل «پایان» یا «اتمام» ندهید.\\n"
        "نکته خیلی مهم. به هیچ عنوان حدس یا افزودن اطلاعاتی از خارج محتوا را انجام ندهید و فقط بر اساس محتوا موجود پاسخ بدهید.\n\n"

        "تمام خروجی‌ها باید به فارسی، رسمی و موجز باشند.\n\n"
        "محتوا:\n{context}\n\n"
        "سؤال کاربر:\n{user_query}\n\n"
        # "پاسخ:"
            )

    # def prompt_rag(self, context, query):
    #     qa_system_prompt =  (
    #     "شما دستیار وام‌های بانک ملت هستید. تنها بر اساس «محتوا» پاسخ دهید.\n\n"
    #     "روند تصمیم‌گیری:\n"
    #     "1️⃣ اگر فقط خوش‌آمدگویی است، فقط بنویس:\n"
    #     "   «سلام! چطور می‌توانم در زمینه وام‌های بانک ملت کمکتان کنم؟»\n\n"
    #     "2️⃣ وگرنه، اگر محتوا شامل پاسخ است، در ≤۳ جمله پاسخ بده و توقف کن.\n"
    #     "   پس از آن، هیچ خروجی دیگری نده.\n\n"
    #     "3️⃣ وگرنه، فقط بنویس:\n"
    #     "   «متأسفم، اطلاعات کافی برای پاسخگویی موجود نیست. "
    #     "تنها در حوزه وام‌های بانک ملت راهنمایی می‌کنم.»\n\n"
    #     "تمام خروجی‌ها رسمی، موجز و به فارسی باشند.\n\n"
    #     "محتوا:\n{context}\n\n"
    #     "سؤال:\n{user_query}\n\n"
    #     "پاسخ:"
    # )



        prompt = PromptTemplate(template=qa_system_prompt , input_variables=["user_query"  , "context"])
        prompt = prompt.format(context = context , user_query = query)
        return prompt
    
    def QA_with_rag(self , query):
        context = self.ir.get(query)
        prompt = self.prompt_rag(context , query)
        response = self.llm(prompt)
        return response
    

                
